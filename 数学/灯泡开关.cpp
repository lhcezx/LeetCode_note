//  首先如果一个灯是亮着的那么这个灯一定被按下了奇数次，因为初始状态是灭的
//  从[1, n]的每一个数都可以拆成两个数乘积，例如8 = 1*8 = 2*4, 20 = 1*20 = 2*10 = 4*5. 假如第i个灯泡数字i可以被拆成m*n, 那么这个灯泡会在第m和第n次切换开关, 由于每个数字的因数都是成对出现的, 只有在当两个因数相同时, 灯泡i被按下的次数才会是奇数. 例如16 = 1*16 = 2*8 = 4*4，灯泡会在第1, 16, 2, 8, 4次被切换，最终是开的状态. 因此我们需要找到从1到n中每一个两个因数是相同的数字.
//  判断一个数字能否被两个相同的因数平方得到，难道不就是对这个数字开方看是否为正整数吗？因此我们只需要对n进行开方，如果能开出来则代表共有squa(n)个数字满足能够通过相同数字平方获得. 反之如果开出来为浮点数，则向下取整, 同样能得到共有多少个数字可以通过平方的得到
class Solution {
public:
    int bulbSwitch(int n) {
        return pow(n, 0.5);
    }
};